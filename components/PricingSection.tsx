[{"text": "[{\"text\": \"'use client';\\n\\nimport { useState } from 'react';\\nimport { getStripe } from '@/utils/stripe';\\n\\ninterface PricingSectionProps {\\n  className?: string;\\n}\\n\\nexport function PricingSection({ className = '' }: PricingSectionProps) {\\n  const [loading, setLoading] = useState(false);\\n\\n  const handleSubscribe = async (priceId: string) => {\\n    setLoading(true);\\n    try {\\n      const response = await fetch('/api/stripe/checkout', {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ priceId }),\\n      });\\n\\n      const { url, error } = await response.json();\\n      \\n      if (error) {\\n        console.error('Error:', error);\\n        alert('Error creating checkout session');\\n        return;\\n      }\\n\\n      if (url) {\\n        window.location.href = url;\\n      }\\n    } catch (error) {\\n      console.error('Error:', error);\\n      alert('Error creating checkout session');\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  const plans = [\\n    {\\n      name: 'Starter',\\n      price: '$9',\\n      period: '/month',\\n      features: [\\n        'Basic features',\\n        'Up to 10 users',\\n        'Email support',\\n        '1GB storage',\\n      ],\\n      priceId: 'price_starter', // Replace with your Stripe Price ID\\n      popular: false,\\n    },\\n    {\\n      name: 'Pro',\\n      price: '$29',\\n      period: '/month',\\n      features: [\\n        'All Starter features',\\n        'Up to 50 users',\\n        'Priority support',\\n        '10GB storage',\\n        'Advanced analytics',\\n      ],\\n      priceId: 'price_pro', // Replace with your Stripe Price ID\\n      popular: true,\\n    },\\n    {\\n      name: 'Enterprise',\\n      price: '$99',\\n      period: '/month',\\n      features: [\\n        'All Pro features',\\n        'Unlimited users',\\n        '24/7 phone support',\\n        'Unlimited storage',\\n        'Custom integrations',\\n        'Dedicated manager',\\n      ],\\n      priceId: 'price_enterprise', // Replace with your Stripe Price ID\\n      popular: false,\\n    },\\n  ];\\n\\n  return (\\n    <div className={`grid grid-cols-1 md:grid-cols-3 gap-8 ${className}`}>\\n      {plans.map((plan, index) => (\\n        <div\\n          key={index}\\n          className={`relative bg-white dark:bg-neutral-dark rounded-xl p-8 border-2 ${\\n            plan.popular\\n              ? 'border-primary shadow-xl scale-105'\\n              : 'border-slate-200 dark:border-slate-700'\\n          }`}\\n        >\\n          {plan.popular && (\\n            <div className=\\\"absolute -top-4 left-1/2 -translate-x-1/2 px-4 py-1 bg-primary text-white text-sm font-semibold rounded-full\\\">\\n              Most Popular\\n            </div>\\n          )}\\n          \\n          <div className=\\\"text-center\\\">\\n            <h3 className=\\\"text-xl font-bold text-slate-900 dark:text-white mb-2\\\">\\n              {plan.name}\\n            </h3>\\n            <div className=\\\"flex items-baseline justify-center mb-4\\\">\\n              <span className=\\\"text-4xl font-bold text-slate-900 dark:text-white\\\">\\n                {plan.price}\\n              </span>\\n              <span className=\\\"text-slate-600 dark:text-slate-400 ml-1\\\">\\n                {plan.period}\\n              </span>\\n            </div>\\n            \\n            <button\\n              onClick={() => handleSubscribe(plan.priceId)}\\n              disabled={loading}\\n              className={`w-full px-6 py-3 rounded-lg font-semibold transition-colors ${\\n                plan.popular\\n                  ? 'bg-primary hover:bg-primary-dark text-white'\\n                  : 'bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 text-slate-900 dark:text-white'\\n              } disabled:opacity-50 disabled:cursor-not-allowed`}\\n            >\\n              {loading ? 'Loading...' : 'Get Started'}\\n            </button>\\n          </div>\\n\\n          <ul className=\\\"mt-8 space-y-4\\\">\\n            {plan.features.map((feature, featureIndex) => (\\n              <li\\n                key={featureIndex}\\n                className=\\\"flex items-center text-slate-600 dark:text-slate-300\\\"\\n              >\\n                <svg\\n                  className=\\\"w-5 h-5 text-primary mr-3 flex-shrink-0\\\"\\n                  fill=\\\"none\\\"\\n                  stroke=\\\"currentColor\\\"\\n                  viewBox=\\\"0 0 24 24\\\"\\n                >\\n                  <path\\n                    strokeLinecap=\\\"round\\\"\\n                    strokeLinejoin=\\\"round\\\"\\n                    strokeWidth={2}\\n                    d=\\\"M5 13l4 4L19 7\\\"\\n                  />\\n                </svg>\\n                {feature}\\n              </li>\\n            ))}\\n          </ul>\\n        </div>\\n      ))}\\n    </div>\\n  );\\n}\\n\", \"type\": \"text\"}]", "type": "text"}]