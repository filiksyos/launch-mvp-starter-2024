[{"text": "[{\"text\": \"import { NextRequest, NextResponse } from 'next/server';\\nimport Stripe from 'stripe';\\n\\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\\n  apiVersion: '2024-12-18.acacia',\\n});\\n\\nconst webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;\\n\\nexport async function POST(req: NextRequest) {\\n  const body = await req.text();\\n  const sig = req.headers.get('stripe-signature')!;\\n\\n  let event: Stripe.Event;\\n\\n  try {\\n    event = stripe.webhooks.constructEvent(body, sig, webhookSecret);\\n  } catch (err: any) {\\n    console.error('Webhook signature verification failed:', err.message);\\n    return NextResponse.json({ error: err.message }, { status: 400 });\\n  }\\n\\n  // Handle the event\\n  switch (event.type) {\\n    case 'checkout.session.completed':\\n      const session = event.data.object as Stripe.Checkout.Session;\\n      console.log('Checkout session completed:', session.id);\\n      // TODO: Save subscription info to Supabase\\n      break;\\n    case 'customer.subscription.updated':\\n      const subscription = event.data.object as Stripe.Subscription;\\n      console.log('Subscription updated:', subscription.id);\\n      // TODO: Update subscription info in Supabase\\n      break;\\n    case 'customer.subscription.deleted':\\n      const deletedSubscription = event.data.object as Stripe.Subscription;\\n      console.log('Subscription deleted:', deletedSubscription.id);\\n      // TODO: Update subscription status in Supabase\\n      break;\\n    default:\\n      console.log(`Unhandled event type ${event.type}`);\\n  }\\n\\n  return NextResponse.json({ received: true });\\n}\\n\", \"type\": \"text\"}]", "type": "text"}]